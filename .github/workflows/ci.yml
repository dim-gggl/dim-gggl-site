name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"
  DJANGO_SETTINGS_MODULE: "portfolio_dimitri.settings"
  SECRET_KEY: "ci-secret-key"
  DEBUG: "False"
  ENVIRONMENT: "production"
  ALLOWED_HOSTS: "127.0.0.1,localhost,dim-gggl.com,www.dim-gggl.com"
  SITE_URL: "https://dim-gggl.com"
  PYTHONUNBUFFERED: "1"
  PYTHONDONTWRITEBYTECODE: "1"

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements/base.txt
            requirements/dev.txt
            requirements/prod.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Run Black
        run: black --check .

      - name: Run Flake8
        run: flake8

  tests:
    name: Django Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements/base.txt
            requirements/dev.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
          pip install -r requirements/prod.txt

      - name: Django health checks
        run: |
          python manage.py check --fail-level=ERROR
          python manage.py makemigrations --check --dry-run

      - name: Run pytest
        run: pytest --maxfail=1 --disable-warnings -q

  build_static:
    name: Build Static Assets
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip
          cache-dependency-path: |
            requirements/base.txt
            requirements/prod.txt

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/prod.txt

      - name: Collect static files
        run: python manage.py collectstatic --noinput

      - name: Compress assets
        run: python manage.py compress --force

      - name: Upload static artifact
        uses: actions/upload-artifact@v4
        with:
          name: staticfiles
          path: |
            staticfiles


